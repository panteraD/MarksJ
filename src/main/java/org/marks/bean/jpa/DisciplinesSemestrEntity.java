/*
 * Created on 17 May 2016 ( Time 04:14:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.marks.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "disciplines_semestr"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="disciplines_semestr", schema="sheet" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="DisciplinesSemestrEntity.countAll", query="SELECT COUNT(x) FROM DisciplinesSemestrEntity x" )
} )
public class DisciplinesSemestrEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="semestr")
    private Integer    semestr      ;

	// "disciplineId" (column "discipline_id") is not defined by itself because used as FK in a link 
	// "specialityId" (column "speciality_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="discipline_id", referencedColumnName="id")
    private DisciplinesEntity disciplines ;

    @ManyToOne
    @JoinColumn(name="speciality_id", referencedColumnName="id")
    private SpecialitiesEntity specialities;

    @OneToMany(mappedBy="disciplinesSemestr", targetEntity=DisciplineParamsEntity.class)
    private List<DisciplineParamsEntity> listOfDisciplineParams;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public DisciplinesSemestrEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : semestr ( int4 ) 
    public void setSemestr( Integer semestr ) {
        this.semestr = semestr;
    }
    public Integer getSemestr() {
        return this.semestr;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setDisciplines( DisciplinesEntity disciplines ) {
        this.disciplines = disciplines;
    }
    public DisciplinesEntity getDisciplines() {
        return this.disciplines;
    }

    public void setSpecialities( SpecialitiesEntity specialities ) {
        this.specialities = specialities;
    }
    public SpecialitiesEntity getSpecialities() {
        return this.specialities;
    }

    public void setListOfDisciplineParams( List<DisciplineParamsEntity> listOfDisciplineParams ) {
        this.listOfDisciplineParams = listOfDisciplineParams;
    }
    public List<DisciplineParamsEntity> getListOfDisciplineParams() {
        return this.listOfDisciplineParams;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(semestr);
        return sb.toString(); 
    } 

}
