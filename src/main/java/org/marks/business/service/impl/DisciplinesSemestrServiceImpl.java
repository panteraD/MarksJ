/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.marks.bean.DisciplinesSemestr;
import org.marks.bean.jpa.DisciplinesSemestrEntity;
import java.util.List;
import org.marks.business.service.DisciplinesSemestrService;
import org.marks.business.service.mapping.DisciplinesSemestrServiceMapper;
import org.marks.persistence.PersistenceServiceProvider;
import org.marks.persistence.services.DisciplinesSemestrPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of DisciplinesSemestrService
 */
@Component
public class DisciplinesSemestrServiceImpl implements DisciplinesSemestrService {

	private DisciplinesSemestrPersistence disciplinesSemestrPersistence;

	@Resource
	private DisciplinesSemestrServiceMapper disciplinesSemestrServiceMapper;
	
	public DisciplinesSemestrServiceImpl() {
		disciplinesSemestrPersistence = PersistenceServiceProvider.getService(DisciplinesSemestrPersistence.class);
	}
		
	@Override
	public DisciplinesSemestr findById(Integer id) {
		DisciplinesSemestrEntity entity = disciplinesSemestrPersistence.load(id);
		return disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(entity);
	}

	@Override
	public List<DisciplinesSemestr> findAll() {
		List<DisciplinesSemestrEntity> entities = disciplinesSemestrPersistence.loadAll();
		List<DisciplinesSemestr> beans = new ArrayList<DisciplinesSemestr>();
		for(DisciplinesSemestrEntity entity : entities) {
			beans.add(disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(entity));
		}
		return beans;
	}

	@Override
	public DisciplinesSemestr save(DisciplinesSemestr disciplinesSemestr) {
		return update(disciplinesSemestr) ;
	}

	@Override
	public DisciplinesSemestr create(DisciplinesSemestr disciplinesSemestr) {
		if(disciplinesSemestrPersistence.load(disciplinesSemestr.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		DisciplinesSemestrEntity disciplinesSemestrEntity = new DisciplinesSemestrEntity();
		disciplinesSemestrServiceMapper.mapDisciplinesSemestrToDisciplinesSemestrEntity(disciplinesSemestr, disciplinesSemestrEntity);
		DisciplinesSemestrEntity disciplinesSemestrEntitySaved = disciplinesSemestrPersistence.save(disciplinesSemestrEntity);
		return disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntitySaved);
	}

	@Override
	public DisciplinesSemestr update(DisciplinesSemestr disciplinesSemestr) {
		DisciplinesSemestrEntity disciplinesSemestrEntity = disciplinesSemestrPersistence.load(disciplinesSemestr.getId());
		disciplinesSemestrServiceMapper.mapDisciplinesSemestrToDisciplinesSemestrEntity(disciplinesSemestr, disciplinesSemestrEntity);
		DisciplinesSemestrEntity disciplinesSemestrEntitySaved = disciplinesSemestrPersistence.save(disciplinesSemestrEntity);
		return disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		disciplinesSemestrPersistence.delete(id);
	}

	public DisciplinesSemestrPersistence getDisciplinesSemestrPersistence() {
		return disciplinesSemestrPersistence;
	}

	public void setDisciplinesSemestrPersistence(DisciplinesSemestrPersistence disciplinesSemestrPersistence) {
		this.disciplinesSemestrPersistence = disciplinesSemestrPersistence;
	}

	public DisciplinesSemestrServiceMapper getDisciplinesSemestrServiceMapper() {
		return disciplinesSemestrServiceMapper;
	}

	public void setDisciplinesSemestrServiceMapper(DisciplinesSemestrServiceMapper disciplinesSemestrServiceMapper) {
		this.disciplinesSemestrServiceMapper = disciplinesSemestrServiceMapper;
	}

}
