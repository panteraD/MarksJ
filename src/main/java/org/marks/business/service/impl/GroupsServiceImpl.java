/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.marks.bean.Groups;
import org.marks.bean.jpa.GroupsEntity;
import java.util.List;
import org.marks.business.service.GroupsService;
import org.marks.business.service.mapping.GroupsServiceMapper;
import org.marks.persistence.PersistenceServiceProvider;
import org.marks.persistence.services.GroupsPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of GroupsService
 */
@Component
public class GroupsServiceImpl implements GroupsService {

	private GroupsPersistence groupsPersistence;

	@Resource
	private GroupsServiceMapper groupsServiceMapper;
	
	public GroupsServiceImpl() {
		groupsPersistence = PersistenceServiceProvider.getService(GroupsPersistence.class);
	}
		
	@Override
	public Groups findById(Integer id) {
		GroupsEntity entity = groupsPersistence.load(id);
		return groupsServiceMapper.mapGroupsEntityToGroups(entity);
	}

	@Override
	public List<Groups> findAll() {
		List<GroupsEntity> entities = groupsPersistence.loadAll();
		List<Groups> beans = new ArrayList<Groups>();
		for(GroupsEntity entity : entities) {
			beans.add(groupsServiceMapper.mapGroupsEntityToGroups(entity));
		}
		return beans;
	}

	@Override
	public Groups save(Groups groups) {
		return update(groups) ;
	}

	@Override
	public Groups create(Groups groups) {
		if(groupsPersistence.load(groups.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		GroupsEntity groupsEntity = new GroupsEntity();
		groupsServiceMapper.mapGroupsToGroupsEntity(groups, groupsEntity);
		GroupsEntity groupsEntitySaved = groupsPersistence.save(groupsEntity);
		return groupsServiceMapper.mapGroupsEntityToGroups(groupsEntitySaved);
	}

	@Override
	public Groups update(Groups groups) {
		GroupsEntity groupsEntity = groupsPersistence.load(groups.getId());
		groupsServiceMapper.mapGroupsToGroupsEntity(groups, groupsEntity);
		GroupsEntity groupsEntitySaved = groupsPersistence.save(groupsEntity);
		return groupsServiceMapper.mapGroupsEntityToGroups(groupsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		groupsPersistence.delete(id);
	}

	public GroupsPersistence getGroupsPersistence() {
		return groupsPersistence;
	}

	public void setGroupsPersistence(GroupsPersistence groupsPersistence) {
		this.groupsPersistence = groupsPersistence;
	}

	public GroupsServiceMapper getGroupsServiceMapper() {
		return groupsServiceMapper;
	}

	public void setGroupsServiceMapper(GroupsServiceMapper groupsServiceMapper) {
		this.groupsServiceMapper = groupsServiceMapper;
	}

}
