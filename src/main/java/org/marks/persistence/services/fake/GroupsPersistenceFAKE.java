/*
 * Created on 17 May 2016 ( Time 04:14:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.persistence.services.fake;

import java.util.List;
import java.util.Map;

import org.marks.bean.jpa.GroupsEntity;
import org.marks.persistence.commons.fake.GenericFakeService;
import org.marks.persistence.services.GroupsPersistence;

/**
 * Fake persistence service implementation ( entity "Groups" )
 *
 * @author Telosys Tools Generator
 */
public class GroupsPersistenceFAKE extends GenericFakeService<GroupsEntity> implements GroupsPersistence {

	public GroupsPersistenceFAKE () {
		super(GroupsEntity.class);
	}
	
	protected GroupsEntity buildEntity(int index) {
		GroupsEntity entity = new GroupsEntity();
		// Init fields with mock values
		entity.setId( nextInteger() ) ;
		entity.setCourse( nextInteger() ) ;
		entity.setGroupNumber( nextInteger() ) ;
		entity.setFaculty( nextString() ) ;
		return entity ;
	}
	
	
	public boolean delete(GroupsEntity entity) {
		log("delete ( GroupsEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer id ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(GroupsEntity entity) {
		log("insert ( GroupsEntity : " + entity + ")" ) ;
	}

	public GroupsEntity load( Integer id ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<GroupsEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<GroupsEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<GroupsEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public GroupsEntity save(GroupsEntity entity) {
		log("insert ( GroupsEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<GroupsEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
