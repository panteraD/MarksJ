/*
 * Created on 17 May 2016 ( Time 04:14:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.marks.bean.Groups;
import org.marks.business.service.GroupsService;
import org.marks.web.listitem.GroupsListItem;

/**
 * Spring MVC controller for 'Groups' management.
 */
@Controller
public class GroupsRestController {

	@Resource
	private GroupsService groupsService;
	
	@RequestMapping( value="/items/groups",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<GroupsListItem> findAllAsListItems() {
		List<Groups> list = groupsService.findAll();
		List<GroupsListItem> items = new LinkedList<GroupsListItem>();
		for ( Groups groups : list ) {
			items.add(new GroupsListItem( groups ) );
		}
		return items;
	}
	
	@RequestMapping( value="/groups",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Groups> findAll() {
		return groupsService.findAll();
	}

	@RequestMapping( value="/groups/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Groups findOne(@PathVariable("id") Integer id) {
		return groupsService.findById(id);
	}
	
	@RequestMapping( value="/groups",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Groups create(@RequestBody Groups groups) {
		return groupsService.create(groups);
	}

	@RequestMapping( value="/groups/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Groups update(@PathVariable("id") Integer id, @RequestBody Groups groups) {
		return groupsService.update(groups);
	}

	@RequestMapping( value="/groups/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		groupsService.delete(id);
	}
	
}
