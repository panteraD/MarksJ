/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.marks.bean.Disciplines;
import org.marks.bean.jpa.DisciplinesEntity;
import java.util.List;
import org.marks.business.service.mapping.DisciplinesServiceMapper;
import org.marks.persistence.services.jpa.DisciplinesPersistenceJPA;
import org.marks.test.DisciplinesFactoryForTest;
import org.marks.test.DisciplinesEntityFactoryForTest;
import org.marks.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DisciplinesService
 */
@RunWith(MockitoJUnitRunner.class)
public class DisciplinesServiceImplTest {

	@InjectMocks
	private DisciplinesServiceImpl disciplinesService;
	@Mock
	private DisciplinesPersistenceJPA disciplinesPersistenceJPA;
	@Mock
	private DisciplinesServiceMapper disciplinesServiceMapper;
	
	private DisciplinesFactoryForTest disciplinesFactoryForTest = new DisciplinesFactoryForTest();

	private DisciplinesEntityFactoryForTest disciplinesEntityFactoryForTest = new DisciplinesEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DisciplinesEntity disciplinesEntity = disciplinesPersistenceJPA.load(id);
		
		Disciplines disciplines = disciplinesFactoryForTest.newDisciplines();
		when(disciplinesServiceMapper.mapDisciplinesEntityToDisciplines(disciplinesEntity)).thenReturn(disciplines);

		// When
		Disciplines disciplinesFound = disciplinesService.findById(id);

		// Then
		assertEquals(disciplines.getId(),disciplinesFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DisciplinesEntity> disciplinesEntitys = new ArrayList<DisciplinesEntity>();
		DisciplinesEntity disciplinesEntity1 = disciplinesEntityFactoryForTest.newDisciplinesEntity();
		disciplinesEntitys.add(disciplinesEntity1);
		DisciplinesEntity disciplinesEntity2 = disciplinesEntityFactoryForTest.newDisciplinesEntity();
		disciplinesEntitys.add(disciplinesEntity2);
		when(disciplinesPersistenceJPA.loadAll()).thenReturn(disciplinesEntitys);
		
		Disciplines disciplines1 = disciplinesFactoryForTest.newDisciplines();
		when(disciplinesServiceMapper.mapDisciplinesEntityToDisciplines(disciplinesEntity1)).thenReturn(disciplines1);
		Disciplines disciplines2 = disciplinesFactoryForTest.newDisciplines();
		when(disciplinesServiceMapper.mapDisciplinesEntityToDisciplines(disciplinesEntity2)).thenReturn(disciplines2);

		// When
		List<Disciplines> disciplinessFounds = disciplinesService.findAll();

		// Then
		assertTrue(disciplines1 == disciplinessFounds.get(0));
		assertTrue(disciplines2 == disciplinessFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Disciplines disciplines = disciplinesFactoryForTest.newDisciplines();

		DisciplinesEntity disciplinesEntity = disciplinesEntityFactoryForTest.newDisciplinesEntity();
		when(disciplinesPersistenceJPA.load(disciplines.getId())).thenReturn(null);
		
		disciplinesEntity = new DisciplinesEntity();
		disciplinesServiceMapper.mapDisciplinesToDisciplinesEntity(disciplines, disciplinesEntity);
		DisciplinesEntity disciplinesEntitySaved = disciplinesPersistenceJPA.save(disciplinesEntity);
		
		Disciplines disciplinesSaved = disciplinesFactoryForTest.newDisciplines();
		when(disciplinesServiceMapper.mapDisciplinesEntityToDisciplines(disciplinesEntitySaved)).thenReturn(disciplinesSaved);

		// When
		Disciplines disciplinesResult = disciplinesService.create(disciplines);

		// Then
		assertTrue(disciplinesResult == disciplinesSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Disciplines disciplines = disciplinesFactoryForTest.newDisciplines();

		DisciplinesEntity disciplinesEntity = disciplinesEntityFactoryForTest.newDisciplinesEntity();
		when(disciplinesPersistenceJPA.load(disciplines.getId())).thenReturn(disciplinesEntity);

		// When
		Exception exception = null;
		try {
			disciplinesService.create(disciplines);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Disciplines disciplines = disciplinesFactoryForTest.newDisciplines();

		DisciplinesEntity disciplinesEntity = disciplinesEntityFactoryForTest.newDisciplinesEntity();
		when(disciplinesPersistenceJPA.load(disciplines.getId())).thenReturn(disciplinesEntity);
		
		DisciplinesEntity disciplinesEntitySaved = disciplinesEntityFactoryForTest.newDisciplinesEntity();
		when(disciplinesPersistenceJPA.save(disciplinesEntity)).thenReturn(disciplinesEntitySaved);
		
		Disciplines disciplinesSaved = disciplinesFactoryForTest.newDisciplines();
		when(disciplinesServiceMapper.mapDisciplinesEntityToDisciplines(disciplinesEntitySaved)).thenReturn(disciplinesSaved);

		// When
		Disciplines disciplinesResult = disciplinesService.update(disciplines);

		// Then
		verify(disciplinesServiceMapper).mapDisciplinesToDisciplinesEntity(disciplines, disciplinesEntity);
		assertTrue(disciplinesResult == disciplinesSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		disciplinesService.delete(id);

		// Then
		verify(disciplinesPersistenceJPA).delete(id);
		
	}

}
