/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.marks.bean.StudentsDisciplineSemestr;
import org.marks.bean.jpa.StudentsDisciplineSemestrEntity;
import org.marks.business.service.mapping.StudentsDisciplineSemestrServiceMapper;
import org.marks.persistence.services.jpa.StudentsDisciplineSemestrPersistenceJPA;
import org.marks.test.StudentsDisciplineSemestrFactoryForTest;
import org.marks.test.StudentsDisciplineSemestrEntityFactoryForTest;
import org.marks.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StudentsDisciplineSemestrService
 */
@RunWith(MockitoJUnitRunner.class)
public class StudentsDisciplineSemestrServiceImplTest {

	@InjectMocks
	private StudentsDisciplineSemestrServiceImpl studentsDisciplineSemestrService;
	@Mock
	private StudentsDisciplineSemestrPersistenceJPA studentsDisciplineSemestrPersistenceJPA;
	@Mock
	private StudentsDisciplineSemestrServiceMapper studentsDisciplineSemestrServiceMapper;
	
	private StudentsDisciplineSemestrFactoryForTest studentsDisciplineSemestrFactoryForTest = new StudentsDisciplineSemestrFactoryForTest();

	private StudentsDisciplineSemestrEntityFactoryForTest studentsDisciplineSemestrEntityFactoryForTest = new StudentsDisciplineSemestrEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntity = studentsDisciplineSemestrPersistenceJPA.load(id);
		
		StudentsDisciplineSemestr studentsDisciplineSemestr = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();
		when(studentsDisciplineSemestrServiceMapper.mapStudentsDisciplineSemestrEntityToStudentsDisciplineSemestr(studentsDisciplineSemestrEntity)).thenReturn(studentsDisciplineSemestr);

		// When
		StudentsDisciplineSemestr studentsDisciplineSemestrFound = studentsDisciplineSemestrService.findById(id);

		// Then
		assertEquals(studentsDisciplineSemestr.getId(),studentsDisciplineSemestrFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StudentsDisciplineSemestrEntity> studentsDisciplineSemestrEntitys = new ArrayList<StudentsDisciplineSemestrEntity>();
		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntity1 = studentsDisciplineSemestrEntityFactoryForTest.newStudentsDisciplineSemestrEntity();
		studentsDisciplineSemestrEntitys.add(studentsDisciplineSemestrEntity1);
		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntity2 = studentsDisciplineSemestrEntityFactoryForTest.newStudentsDisciplineSemestrEntity();
		studentsDisciplineSemestrEntitys.add(studentsDisciplineSemestrEntity2);
		when(studentsDisciplineSemestrPersistenceJPA.loadAll()).thenReturn(studentsDisciplineSemestrEntitys);
		
		StudentsDisciplineSemestr studentsDisciplineSemestr1 = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();
		when(studentsDisciplineSemestrServiceMapper.mapStudentsDisciplineSemestrEntityToStudentsDisciplineSemestr(studentsDisciplineSemestrEntity1)).thenReturn(studentsDisciplineSemestr1);
		StudentsDisciplineSemestr studentsDisciplineSemestr2 = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();
		when(studentsDisciplineSemestrServiceMapper.mapStudentsDisciplineSemestrEntityToStudentsDisciplineSemestr(studentsDisciplineSemestrEntity2)).thenReturn(studentsDisciplineSemestr2);

		// When
		List<StudentsDisciplineSemestr> studentsDisciplineSemestrsFounds = studentsDisciplineSemestrService.findAll();

		// Then
		assertTrue(studentsDisciplineSemestr1 == studentsDisciplineSemestrsFounds.get(0));
		assertTrue(studentsDisciplineSemestr2 == studentsDisciplineSemestrsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StudentsDisciplineSemestr studentsDisciplineSemestr = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();

		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntity = studentsDisciplineSemestrEntityFactoryForTest.newStudentsDisciplineSemestrEntity();
		when(studentsDisciplineSemestrPersistenceJPA.load(studentsDisciplineSemestr.getId())).thenReturn(null);
		
		studentsDisciplineSemestrEntity = new StudentsDisciplineSemestrEntity();
		studentsDisciplineSemestrServiceMapper.mapStudentsDisciplineSemestrToStudentsDisciplineSemestrEntity(studentsDisciplineSemestr, studentsDisciplineSemestrEntity);
		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntitySaved = studentsDisciplineSemestrPersistenceJPA.save(studentsDisciplineSemestrEntity);
		
		StudentsDisciplineSemestr studentsDisciplineSemestrSaved = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();
		when(studentsDisciplineSemestrServiceMapper.mapStudentsDisciplineSemestrEntityToStudentsDisciplineSemestr(studentsDisciplineSemestrEntitySaved)).thenReturn(studentsDisciplineSemestrSaved);

		// When
		StudentsDisciplineSemestr studentsDisciplineSemestrResult = studentsDisciplineSemestrService.create(studentsDisciplineSemestr);

		// Then
		assertTrue(studentsDisciplineSemestrResult == studentsDisciplineSemestrSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StudentsDisciplineSemestr studentsDisciplineSemestr = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();

		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntity = studentsDisciplineSemestrEntityFactoryForTest.newStudentsDisciplineSemestrEntity();
		when(studentsDisciplineSemestrPersistenceJPA.load(studentsDisciplineSemestr.getId())).thenReturn(studentsDisciplineSemestrEntity);

		// When
		Exception exception = null;
		try {
			studentsDisciplineSemestrService.create(studentsDisciplineSemestr);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StudentsDisciplineSemestr studentsDisciplineSemestr = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();

		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntity = studentsDisciplineSemestrEntityFactoryForTest.newStudentsDisciplineSemestrEntity();
		when(studentsDisciplineSemestrPersistenceJPA.load(studentsDisciplineSemestr.getId())).thenReturn(studentsDisciplineSemestrEntity);
		
		StudentsDisciplineSemestrEntity studentsDisciplineSemestrEntitySaved = studentsDisciplineSemestrEntityFactoryForTest.newStudentsDisciplineSemestrEntity();
		when(studentsDisciplineSemestrPersistenceJPA.save(studentsDisciplineSemestrEntity)).thenReturn(studentsDisciplineSemestrEntitySaved);
		
		StudentsDisciplineSemestr studentsDisciplineSemestrSaved = studentsDisciplineSemestrFactoryForTest.newStudentsDisciplineSemestr();
		when(studentsDisciplineSemestrServiceMapper.mapStudentsDisciplineSemestrEntityToStudentsDisciplineSemestr(studentsDisciplineSemestrEntitySaved)).thenReturn(studentsDisciplineSemestrSaved);

		// When
		StudentsDisciplineSemestr studentsDisciplineSemestrResult = studentsDisciplineSemestrService.update(studentsDisciplineSemestr);

		// Then
		verify(studentsDisciplineSemestrServiceMapper).mapStudentsDisciplineSemestrToStudentsDisciplineSemestrEntity(studentsDisciplineSemestr, studentsDisciplineSemestrEntity);
		assertTrue(studentsDisciplineSemestrResult == studentsDisciplineSemestrSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		studentsDisciplineSemestrService.delete(id);

		// Then
		verify(studentsDisciplineSemestrPersistenceJPA).delete(id);
		
	}

}
