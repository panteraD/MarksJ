/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.marks.bean.Students;
import org.marks.bean.jpa.StudentsEntity;
import java.util.Date;
import java.util.List;
import org.marks.business.service.mapping.StudentsServiceMapper;
import org.marks.persistence.services.jpa.StudentsPersistenceJPA;
import org.marks.test.StudentsFactoryForTest;
import org.marks.test.StudentsEntityFactoryForTest;
import org.marks.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StudentsService
 */
@RunWith(MockitoJUnitRunner.class)
public class StudentsServiceImplTest {

	@InjectMocks
	private StudentsServiceImpl studentsService;
	@Mock
	private StudentsPersistenceJPA studentsPersistenceJPA;
	@Mock
	private StudentsServiceMapper studentsServiceMapper;
	
	private StudentsFactoryForTest studentsFactoryForTest = new StudentsFactoryForTest();

	private StudentsEntityFactoryForTest studentsEntityFactoryForTest = new StudentsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StudentsEntity studentsEntity = studentsPersistenceJPA.load(id);
		
		Students students = studentsFactoryForTest.newStudents();
		when(studentsServiceMapper.mapStudentsEntityToStudents(studentsEntity)).thenReturn(students);

		// When
		Students studentsFound = studentsService.findById(id);

		// Then
		assertEquals(students.getId(),studentsFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StudentsEntity> studentsEntitys = new ArrayList<StudentsEntity>();
		StudentsEntity studentsEntity1 = studentsEntityFactoryForTest.newStudentsEntity();
		studentsEntitys.add(studentsEntity1);
		StudentsEntity studentsEntity2 = studentsEntityFactoryForTest.newStudentsEntity();
		studentsEntitys.add(studentsEntity2);
		when(studentsPersistenceJPA.loadAll()).thenReturn(studentsEntitys);
		
		Students students1 = studentsFactoryForTest.newStudents();
		when(studentsServiceMapper.mapStudentsEntityToStudents(studentsEntity1)).thenReturn(students1);
		Students students2 = studentsFactoryForTest.newStudents();
		when(studentsServiceMapper.mapStudentsEntityToStudents(studentsEntity2)).thenReturn(students2);

		// When
		List<Students> studentssFounds = studentsService.findAll();

		// Then
		assertTrue(students1 == studentssFounds.get(0));
		assertTrue(students2 == studentssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Students students = studentsFactoryForTest.newStudents();

		StudentsEntity studentsEntity = studentsEntityFactoryForTest.newStudentsEntity();
		when(studentsPersistenceJPA.load(students.getId())).thenReturn(null);
		
		studentsEntity = new StudentsEntity();
		studentsServiceMapper.mapStudentsToStudentsEntity(students, studentsEntity);
		StudentsEntity studentsEntitySaved = studentsPersistenceJPA.save(studentsEntity);
		
		Students studentsSaved = studentsFactoryForTest.newStudents();
		when(studentsServiceMapper.mapStudentsEntityToStudents(studentsEntitySaved)).thenReturn(studentsSaved);

		// When
		Students studentsResult = studentsService.create(students);

		// Then
		assertTrue(studentsResult == studentsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Students students = studentsFactoryForTest.newStudents();

		StudentsEntity studentsEntity = studentsEntityFactoryForTest.newStudentsEntity();
		when(studentsPersistenceJPA.load(students.getId())).thenReturn(studentsEntity);

		// When
		Exception exception = null;
		try {
			studentsService.create(students);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Students students = studentsFactoryForTest.newStudents();

		StudentsEntity studentsEntity = studentsEntityFactoryForTest.newStudentsEntity();
		when(studentsPersistenceJPA.load(students.getId())).thenReturn(studentsEntity);
		
		StudentsEntity studentsEntitySaved = studentsEntityFactoryForTest.newStudentsEntity();
		when(studentsPersistenceJPA.save(studentsEntity)).thenReturn(studentsEntitySaved);
		
		Students studentsSaved = studentsFactoryForTest.newStudents();
		when(studentsServiceMapper.mapStudentsEntityToStudents(studentsEntitySaved)).thenReturn(studentsSaved);

		// When
		Students studentsResult = studentsService.update(students);

		// Then
		verify(studentsServiceMapper).mapStudentsToStudentsEntity(students, studentsEntity);
		assertTrue(studentsResult == studentsSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		studentsService.delete(id);

		// Then
		verify(studentsPersistenceJPA).delete(id);
		
	}

}
