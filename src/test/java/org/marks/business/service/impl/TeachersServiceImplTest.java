/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.marks.bean.Teachers;
import org.marks.bean.jpa.TeachersEntity;
import java.util.List;
import org.marks.business.service.mapping.TeachersServiceMapper;
import org.marks.persistence.services.jpa.TeachersPersistenceJPA;
import org.marks.test.TeachersFactoryForTest;
import org.marks.test.TeachersEntityFactoryForTest;
import org.marks.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TeachersService
 */
@RunWith(MockitoJUnitRunner.class)
public class TeachersServiceImplTest {

	@InjectMocks
	private TeachersServiceImpl teachersService;
	@Mock
	private TeachersPersistenceJPA teachersPersistenceJPA;
	@Mock
	private TeachersServiceMapper teachersServiceMapper;
	
	private TeachersFactoryForTest teachersFactoryForTest = new TeachersFactoryForTest();

	private TeachersEntityFactoryForTest teachersEntityFactoryForTest = new TeachersEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		TeachersEntity teachersEntity = teachersPersistenceJPA.load(id);
		
		Teachers teachers = teachersFactoryForTest.newTeachers();
		when(teachersServiceMapper.mapTeachersEntityToTeachers(teachersEntity)).thenReturn(teachers);

		// When
		Teachers teachersFound = teachersService.findById(id);

		// Then
		assertEquals(teachers.getId(),teachersFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TeachersEntity> teachersEntitys = new ArrayList<TeachersEntity>();
		TeachersEntity teachersEntity1 = teachersEntityFactoryForTest.newTeachersEntity();
		teachersEntitys.add(teachersEntity1);
		TeachersEntity teachersEntity2 = teachersEntityFactoryForTest.newTeachersEntity();
		teachersEntitys.add(teachersEntity2);
		when(teachersPersistenceJPA.loadAll()).thenReturn(teachersEntitys);
		
		Teachers teachers1 = teachersFactoryForTest.newTeachers();
		when(teachersServiceMapper.mapTeachersEntityToTeachers(teachersEntity1)).thenReturn(teachers1);
		Teachers teachers2 = teachersFactoryForTest.newTeachers();
		when(teachersServiceMapper.mapTeachersEntityToTeachers(teachersEntity2)).thenReturn(teachers2);

		// When
		List<Teachers> teacherssFounds = teachersService.findAll();

		// Then
		assertTrue(teachers1 == teacherssFounds.get(0));
		assertTrue(teachers2 == teacherssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Teachers teachers = teachersFactoryForTest.newTeachers();

		TeachersEntity teachersEntity = teachersEntityFactoryForTest.newTeachersEntity();
		when(teachersPersistenceJPA.load(teachers.getId())).thenReturn(null);
		
		teachersEntity = new TeachersEntity();
		teachersServiceMapper.mapTeachersToTeachersEntity(teachers, teachersEntity);
		TeachersEntity teachersEntitySaved = teachersPersistenceJPA.save(teachersEntity);
		
		Teachers teachersSaved = teachersFactoryForTest.newTeachers();
		when(teachersServiceMapper.mapTeachersEntityToTeachers(teachersEntitySaved)).thenReturn(teachersSaved);

		// When
		Teachers teachersResult = teachersService.create(teachers);

		// Then
		assertTrue(teachersResult == teachersSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Teachers teachers = teachersFactoryForTest.newTeachers();

		TeachersEntity teachersEntity = teachersEntityFactoryForTest.newTeachersEntity();
		when(teachersPersistenceJPA.load(teachers.getId())).thenReturn(teachersEntity);

		// When
		Exception exception = null;
		try {
			teachersService.create(teachers);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Teachers teachers = teachersFactoryForTest.newTeachers();

		TeachersEntity teachersEntity = teachersEntityFactoryForTest.newTeachersEntity();
		when(teachersPersistenceJPA.load(teachers.getId())).thenReturn(teachersEntity);
		
		TeachersEntity teachersEntitySaved = teachersEntityFactoryForTest.newTeachersEntity();
		when(teachersPersistenceJPA.save(teachersEntity)).thenReturn(teachersEntitySaved);
		
		Teachers teachersSaved = teachersFactoryForTest.newTeachers();
		when(teachersServiceMapper.mapTeachersEntityToTeachers(teachersEntitySaved)).thenReturn(teachersSaved);

		// When
		Teachers teachersResult = teachersService.update(teachers);

		// Then
		verify(teachersServiceMapper).mapTeachersToTeachersEntity(teachers, teachersEntity);
		assertTrue(teachersResult == teachersSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		teachersService.delete(id);

		// Then
		verify(teachersPersistenceJPA).delete(id);
		
	}

}
