/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.marks.bean.DisciplinesSemestr;
import org.marks.bean.jpa.DisciplinesSemestrEntity;
import java.util.List;
import org.marks.business.service.mapping.DisciplinesSemestrServiceMapper;
import org.marks.persistence.services.jpa.DisciplinesSemestrPersistenceJPA;
import org.marks.test.DisciplinesSemestrFactoryForTest;
import org.marks.test.DisciplinesSemestrEntityFactoryForTest;
import org.marks.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DisciplinesSemestrService
 */
@RunWith(MockitoJUnitRunner.class)
public class DisciplinesSemestrServiceImplTest {

	@InjectMocks
	private DisciplinesSemestrServiceImpl disciplinesSemestrService;
	@Mock
	private DisciplinesSemestrPersistenceJPA disciplinesSemestrPersistenceJPA;
	@Mock
	private DisciplinesSemestrServiceMapper disciplinesSemestrServiceMapper;
	
	private DisciplinesSemestrFactoryForTest disciplinesSemestrFactoryForTest = new DisciplinesSemestrFactoryForTest();

	private DisciplinesSemestrEntityFactoryForTest disciplinesSemestrEntityFactoryForTest = new DisciplinesSemestrEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DisciplinesSemestrEntity disciplinesSemestrEntity = disciplinesSemestrPersistenceJPA.load(id);
		
		DisciplinesSemestr disciplinesSemestr = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();
		when(disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntity)).thenReturn(disciplinesSemestr);

		// When
		DisciplinesSemestr disciplinesSemestrFound = disciplinesSemestrService.findById(id);

		// Then
		assertEquals(disciplinesSemestr.getId(),disciplinesSemestrFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DisciplinesSemestrEntity> disciplinesSemestrEntitys = new ArrayList<DisciplinesSemestrEntity>();
		DisciplinesSemestrEntity disciplinesSemestrEntity1 = disciplinesSemestrEntityFactoryForTest.newDisciplinesSemestrEntity();
		disciplinesSemestrEntitys.add(disciplinesSemestrEntity1);
		DisciplinesSemestrEntity disciplinesSemestrEntity2 = disciplinesSemestrEntityFactoryForTest.newDisciplinesSemestrEntity();
		disciplinesSemestrEntitys.add(disciplinesSemestrEntity2);
		when(disciplinesSemestrPersistenceJPA.loadAll()).thenReturn(disciplinesSemestrEntitys);
		
		DisciplinesSemestr disciplinesSemestr1 = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();
		when(disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntity1)).thenReturn(disciplinesSemestr1);
		DisciplinesSemestr disciplinesSemestr2 = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();
		when(disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntity2)).thenReturn(disciplinesSemestr2);

		// When
		List<DisciplinesSemestr> disciplinesSemestrsFounds = disciplinesSemestrService.findAll();

		// Then
		assertTrue(disciplinesSemestr1 == disciplinesSemestrsFounds.get(0));
		assertTrue(disciplinesSemestr2 == disciplinesSemestrsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DisciplinesSemestr disciplinesSemestr = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();

		DisciplinesSemestrEntity disciplinesSemestrEntity = disciplinesSemestrEntityFactoryForTest.newDisciplinesSemestrEntity();
		when(disciplinesSemestrPersistenceJPA.load(disciplinesSemestr.getId())).thenReturn(null);
		
		disciplinesSemestrEntity = new DisciplinesSemestrEntity();
		disciplinesSemestrServiceMapper.mapDisciplinesSemestrToDisciplinesSemestrEntity(disciplinesSemestr, disciplinesSemestrEntity);
		DisciplinesSemestrEntity disciplinesSemestrEntitySaved = disciplinesSemestrPersistenceJPA.save(disciplinesSemestrEntity);
		
		DisciplinesSemestr disciplinesSemestrSaved = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();
		when(disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntitySaved)).thenReturn(disciplinesSemestrSaved);

		// When
		DisciplinesSemestr disciplinesSemestrResult = disciplinesSemestrService.create(disciplinesSemestr);

		// Then
		assertTrue(disciplinesSemestrResult == disciplinesSemestrSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DisciplinesSemestr disciplinesSemestr = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();

		DisciplinesSemestrEntity disciplinesSemestrEntity = disciplinesSemestrEntityFactoryForTest.newDisciplinesSemestrEntity();
		when(disciplinesSemestrPersistenceJPA.load(disciplinesSemestr.getId())).thenReturn(disciplinesSemestrEntity);

		// When
		Exception exception = null;
		try {
			disciplinesSemestrService.create(disciplinesSemestr);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DisciplinesSemestr disciplinesSemestr = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();

		DisciplinesSemestrEntity disciplinesSemestrEntity = disciplinesSemestrEntityFactoryForTest.newDisciplinesSemestrEntity();
		when(disciplinesSemestrPersistenceJPA.load(disciplinesSemestr.getId())).thenReturn(disciplinesSemestrEntity);
		
		DisciplinesSemestrEntity disciplinesSemestrEntitySaved = disciplinesSemestrEntityFactoryForTest.newDisciplinesSemestrEntity();
		when(disciplinesSemestrPersistenceJPA.save(disciplinesSemestrEntity)).thenReturn(disciplinesSemestrEntitySaved);
		
		DisciplinesSemestr disciplinesSemestrSaved = disciplinesSemestrFactoryForTest.newDisciplinesSemestr();
		when(disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntitySaved)).thenReturn(disciplinesSemestrSaved);

		// When
		DisciplinesSemestr disciplinesSemestrResult = disciplinesSemestrService.update(disciplinesSemestr);

		// Then
		verify(disciplinesSemestrServiceMapper).mapDisciplinesSemestrToDisciplinesSemestrEntity(disciplinesSemestr, disciplinesSemestrEntity);
		assertTrue(disciplinesSemestrResult == disciplinesSemestrSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		disciplinesSemestrService.delete(id);

		// Then
		verify(disciplinesSemestrPersistenceJPA).delete(id);
		
	}

}
