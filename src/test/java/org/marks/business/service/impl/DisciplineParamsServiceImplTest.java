/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.marks.bean.DisciplineParams;
import org.marks.bean.jpa.DisciplineParamsEntity;
import java.util.List;
import org.marks.business.service.mapping.DisciplineParamsServiceMapper;
import org.marks.persistence.services.jpa.DisciplineParamsPersistenceJPA;
import org.marks.test.DisciplineParamsFactoryForTest;
import org.marks.test.DisciplineParamsEntityFactoryForTest;
import org.marks.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DisciplineParamsService
 */
@RunWith(MockitoJUnitRunner.class)
public class DisciplineParamsServiceImplTest {

	@InjectMocks
	private DisciplineParamsServiceImpl disciplineParamsService;
	@Mock
	private DisciplineParamsPersistenceJPA disciplineParamsPersistenceJPA;
	@Mock
	private DisciplineParamsServiceMapper disciplineParamsServiceMapper;
	
	private DisciplineParamsFactoryForTest disciplineParamsFactoryForTest = new DisciplineParamsFactoryForTest();

	private DisciplineParamsEntityFactoryForTest disciplineParamsEntityFactoryForTest = new DisciplineParamsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		DisciplineParamsEntity disciplineParamsEntity = disciplineParamsPersistenceJPA.load(id);
		
		DisciplineParams disciplineParams = disciplineParamsFactoryForTest.newDisciplineParams();
		when(disciplineParamsServiceMapper.mapDisciplineParamsEntityToDisciplineParams(disciplineParamsEntity)).thenReturn(disciplineParams);

		// When
		DisciplineParams disciplineParamsFound = disciplineParamsService.findById(id);

		// Then
		assertEquals(disciplineParams.getId(),disciplineParamsFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DisciplineParamsEntity> disciplineParamsEntitys = new ArrayList<DisciplineParamsEntity>();
		DisciplineParamsEntity disciplineParamsEntity1 = disciplineParamsEntityFactoryForTest.newDisciplineParamsEntity();
		disciplineParamsEntitys.add(disciplineParamsEntity1);
		DisciplineParamsEntity disciplineParamsEntity2 = disciplineParamsEntityFactoryForTest.newDisciplineParamsEntity();
		disciplineParamsEntitys.add(disciplineParamsEntity2);
		when(disciplineParamsPersistenceJPA.loadAll()).thenReturn(disciplineParamsEntitys);
		
		DisciplineParams disciplineParams1 = disciplineParamsFactoryForTest.newDisciplineParams();
		when(disciplineParamsServiceMapper.mapDisciplineParamsEntityToDisciplineParams(disciplineParamsEntity1)).thenReturn(disciplineParams1);
		DisciplineParams disciplineParams2 = disciplineParamsFactoryForTest.newDisciplineParams();
		when(disciplineParamsServiceMapper.mapDisciplineParamsEntityToDisciplineParams(disciplineParamsEntity2)).thenReturn(disciplineParams2);

		// When
		List<DisciplineParams> disciplineParamssFounds = disciplineParamsService.findAll();

		// Then
		assertTrue(disciplineParams1 == disciplineParamssFounds.get(0));
		assertTrue(disciplineParams2 == disciplineParamssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DisciplineParams disciplineParams = disciplineParamsFactoryForTest.newDisciplineParams();

		DisciplineParamsEntity disciplineParamsEntity = disciplineParamsEntityFactoryForTest.newDisciplineParamsEntity();
		when(disciplineParamsPersistenceJPA.load(disciplineParams.getId())).thenReturn(null);
		
		disciplineParamsEntity = new DisciplineParamsEntity();
		disciplineParamsServiceMapper.mapDisciplineParamsToDisciplineParamsEntity(disciplineParams, disciplineParamsEntity);
		DisciplineParamsEntity disciplineParamsEntitySaved = disciplineParamsPersistenceJPA.save(disciplineParamsEntity);
		
		DisciplineParams disciplineParamsSaved = disciplineParamsFactoryForTest.newDisciplineParams();
		when(disciplineParamsServiceMapper.mapDisciplineParamsEntityToDisciplineParams(disciplineParamsEntitySaved)).thenReturn(disciplineParamsSaved);

		// When
		DisciplineParams disciplineParamsResult = disciplineParamsService.create(disciplineParams);

		// Then
		assertTrue(disciplineParamsResult == disciplineParamsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DisciplineParams disciplineParams = disciplineParamsFactoryForTest.newDisciplineParams();

		DisciplineParamsEntity disciplineParamsEntity = disciplineParamsEntityFactoryForTest.newDisciplineParamsEntity();
		when(disciplineParamsPersistenceJPA.load(disciplineParams.getId())).thenReturn(disciplineParamsEntity);

		// When
		Exception exception = null;
		try {
			disciplineParamsService.create(disciplineParams);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DisciplineParams disciplineParams = disciplineParamsFactoryForTest.newDisciplineParams();

		DisciplineParamsEntity disciplineParamsEntity = disciplineParamsEntityFactoryForTest.newDisciplineParamsEntity();
		when(disciplineParamsPersistenceJPA.load(disciplineParams.getId())).thenReturn(disciplineParamsEntity);
		
		DisciplineParamsEntity disciplineParamsEntitySaved = disciplineParamsEntityFactoryForTest.newDisciplineParamsEntity();
		when(disciplineParamsPersistenceJPA.save(disciplineParamsEntity)).thenReturn(disciplineParamsEntitySaved);
		
		DisciplineParams disciplineParamsSaved = disciplineParamsFactoryForTest.newDisciplineParams();
		when(disciplineParamsServiceMapper.mapDisciplineParamsEntityToDisciplineParams(disciplineParamsEntitySaved)).thenReturn(disciplineParamsSaved);

		// When
		DisciplineParams disciplineParamsResult = disciplineParamsService.update(disciplineParams);

		// Then
		verify(disciplineParamsServiceMapper).mapDisciplineParamsToDisciplineParamsEntity(disciplineParams, disciplineParamsEntity);
		assertTrue(disciplineParamsResult == disciplineParamsSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		disciplineParamsService.delete(id);

		// Then
		verify(disciplineParamsPersistenceJPA).delete(id);
		
	}

}
