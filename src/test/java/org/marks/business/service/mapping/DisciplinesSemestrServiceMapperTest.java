/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.marks.bean.DisciplinesSemestr;
import org.marks.bean.jpa.DisciplinesSemestrEntity;
import org.marks.bean.jpa.DisciplinesEntity;
import org.marks.bean.jpa.SpecialitiesEntity;
import org.marks.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class DisciplinesSemestrServiceMapperTest {

	private DisciplinesSemestrServiceMapper disciplinesSemestrServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		disciplinesSemestrServiceMapper = new DisciplinesSemestrServiceMapper();
		disciplinesSemestrServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'DisciplinesSemestrEntity' to 'DisciplinesSemestr'
	 * @param disciplinesSemestrEntity
	 */
	@Test
	public void testMapDisciplinesSemestrEntityToDisciplinesSemestr() {
		// Given
		DisciplinesSemestrEntity disciplinesSemestrEntity = new DisciplinesSemestrEntity();
		disciplinesSemestrEntity.setSemestr(mockValues.nextInteger());
		disciplinesSemestrEntity.setDisciplines(new DisciplinesEntity());
		disciplinesSemestrEntity.getDisciplines().setId(mockValues.nextInteger());
		disciplinesSemestrEntity.setSpecialities(new SpecialitiesEntity());
		disciplinesSemestrEntity.getSpecialities().setId(mockValues.nextInteger());
		
		// When
		DisciplinesSemestr disciplinesSemestr = disciplinesSemestrServiceMapper.mapDisciplinesSemestrEntityToDisciplinesSemestr(disciplinesSemestrEntity);
		
		// Then
		assertEquals(disciplinesSemestrEntity.getSemestr(), disciplinesSemestr.getSemestr());
		assertEquals(disciplinesSemestrEntity.getDisciplines().getId(), disciplinesSemestr.getDisciplineId());
		assertEquals(disciplinesSemestrEntity.getSpecialities().getId(), disciplinesSemestr.getSpecialityId());
	}
	
	/**
	 * Test : Mapping from 'DisciplinesSemestr' to 'DisciplinesSemestrEntity'
	 */
	@Test
	public void testMapDisciplinesSemestrToDisciplinesSemestrEntity() {
		// Given
		DisciplinesSemestr disciplinesSemestr = new DisciplinesSemestr();
		disciplinesSemestr.setSemestr(mockValues.nextInteger());
		disciplinesSemestr.setDisciplineId(mockValues.nextInteger());
		disciplinesSemestr.setSpecialityId(mockValues.nextInteger());

		DisciplinesSemestrEntity disciplinesSemestrEntity = new DisciplinesSemestrEntity();
		
		// When
		disciplinesSemestrServiceMapper.mapDisciplinesSemestrToDisciplinesSemestrEntity(disciplinesSemestr, disciplinesSemestrEntity);
		
		// Then
		assertEquals(disciplinesSemestr.getSemestr(), disciplinesSemestrEntity.getSemestr());
		assertEquals(disciplinesSemestr.getDisciplineId(), disciplinesSemestrEntity.getDisciplines().getId());
		assertEquals(disciplinesSemestr.getSpecialityId(), disciplinesSemestrEntity.getSpecialities().getId());
	}

}