/*
 * Created on 17 May 2016 ( Time 04:14:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.marks.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.marks.bean.DisciplineParams;
import org.marks.bean.jpa.DisciplineParamsEntity;
import org.marks.bean.jpa.DisciplinesSemestrEntity;
import org.marks.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class DisciplineParamsServiceMapperTest {

	private DisciplineParamsServiceMapper disciplineParamsServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		disciplineParamsServiceMapper = new DisciplineParamsServiceMapper();
		disciplineParamsServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'DisciplineParamsEntity' to 'DisciplineParams'
	 * @param disciplineParamsEntity
	 */
	@Test
	public void testMapDisciplineParamsEntityToDisciplineParams() {
		// Given
		DisciplineParamsEntity disciplineParamsEntity = new DisciplineParamsEntity();
		disciplineParamsEntity.setActivityName(mockValues.nextString(2147483647));
		disciplineParamsEntity.setActivityMaxQuantity(mockValues.nextInteger());
		disciplineParamsEntity.setScorePerActivity(mockValues.nextInteger());
		disciplineParamsEntity.setScoreMax(mockValues.nextInteger());
		disciplineParamsEntity.setDisciplinesSemestr(new DisciplinesSemestrEntity());
		disciplineParamsEntity.getDisciplinesSemestr().setId(mockValues.nextInteger());
		
		// When
		DisciplineParams disciplineParams = disciplineParamsServiceMapper.mapDisciplineParamsEntityToDisciplineParams(disciplineParamsEntity);
		
		// Then
		assertEquals(disciplineParamsEntity.getActivityName(), disciplineParams.getActivityName());
		assertEquals(disciplineParamsEntity.getActivityMaxQuantity(), disciplineParams.getActivityMaxQuantity());
		assertEquals(disciplineParamsEntity.getScorePerActivity(), disciplineParams.getScorePerActivity());
		assertEquals(disciplineParamsEntity.getScoreMax(), disciplineParams.getScoreMax());
		assertEquals(disciplineParamsEntity.getDisciplinesSemestr().getId(), disciplineParams.getDisciplineSemestrId());
	}
	
	/**
	 * Test : Mapping from 'DisciplineParams' to 'DisciplineParamsEntity'
	 */
	@Test
	public void testMapDisciplineParamsToDisciplineParamsEntity() {
		// Given
		DisciplineParams disciplineParams = new DisciplineParams();
		disciplineParams.setActivityName(mockValues.nextString(2147483647));
		disciplineParams.setActivityMaxQuantity(mockValues.nextInteger());
		disciplineParams.setScorePerActivity(mockValues.nextInteger());
		disciplineParams.setScoreMax(mockValues.nextInteger());
		disciplineParams.setDisciplineSemestrId(mockValues.nextInteger());

		DisciplineParamsEntity disciplineParamsEntity = new DisciplineParamsEntity();
		
		// When
		disciplineParamsServiceMapper.mapDisciplineParamsToDisciplineParamsEntity(disciplineParams, disciplineParamsEntity);
		
		// Then
		assertEquals(disciplineParams.getActivityName(), disciplineParamsEntity.getActivityName());
		assertEquals(disciplineParams.getActivityMaxQuantity(), disciplineParamsEntity.getActivityMaxQuantity());
		assertEquals(disciplineParams.getScorePerActivity(), disciplineParamsEntity.getScorePerActivity());
		assertEquals(disciplineParams.getScoreMax(), disciplineParamsEntity.getScoreMax());
		assertEquals(disciplineParams.getDisciplineSemestrId(), disciplineParamsEntity.getDisciplinesSemestr().getId());
	}

}